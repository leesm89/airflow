{"timestamp":"2025-08-06T12:50:01.051943","level":"info","event":"DAG bundles loaded: dags_2, dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-06T12:50:01.052124","level":"info","event":"Filling up the DagBag from /opt/airflow/dags_2/dags_simple_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-06T12:50:01.138040Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.138168Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.138263Z","level":"info","event":"Current task name:simple_task1","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.138329Z","level":"info","event":"Dag name:dags_simple_dag","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.138718Z","level":"info","event":"::group::show context variables","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.138939Z","level":"info","event":"{'conn': <ConnectionAccessor (dynamic access)>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139013Z","level":"info","event":" 'dag': <DAG: dags_simple_dag>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139081Z","level":"info","event":" 'dag_run': DagRun(dag_id='dags_simple_dag', run_id='scheduled__2025-08-06T12:50:00+00:00', logical_date=datetime.datetime(2025, 8, 6, 12, 50, tzinfo=datetime.timezone.utc), data_interval_start=datetime.datetime(2025, 8, 6, 12, 50, tzinfo=datetime.timezone.utc), data_interval_end=datetime.datetime(2025, 8, 6, 12, 50, tzinfo=datetime.timezone.utc), run_after=datetime.datetime(2025, 8, 6, 12, 50, tzinfo=datetime.timezone.utc), start_date=datetime.datetime(2025, 8, 6, 12, 50, 0, 521165, tzinfo=datetime.timezone.utc), end_date=None, clear_number=0, run_type=<DagRunType.SCHEDULED: 'scheduled'>, conf={}, consumed_asset_events=[]),","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139148Z","level":"info","event":" 'data_interval_end': DateTime(2025, 8, 6, 12, 50, 0, tzinfo=Timezone('UTC')),","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139209Z","level":"info","event":" 'data_interval_start': DateTime(2025, 8, 6, 12, 50, 0, tzinfo=Timezone('UTC')),","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139256Z","level":"info","event":" 'ds': '2025-08-06',","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139309Z","level":"info","event":" 'ds_nodash': '20250806',","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139360Z","level":"info","event":" 'inlet_events': InletEventsAccessors(_inlets=[], _assets={}, _asset_aliases={}),","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139407Z","level":"info","event":" 'inlets': [],","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139455Z","level":"info","event":" 'logical_date': DateTime(2025, 8, 6, 12, 50, 0, tzinfo=Timezone('UTC')),","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139503Z","level":"info","event":" 'macros': <MacrosAccessor (dynamic access to macros)>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139548Z","level":"info","event":" 'map_index_template': None,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139596Z","level":"info","event":" 'outlet_events': <airflow.sdk.execution_time.context.OutletEventAccessors object at 0xffff6c0cd2b0>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139643Z","level":"info","event":" 'outlets': [],","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.139688Z","level":"info","event":" 'params': {},","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144244Z","level":"info","event":" 'prev_data_interval_end_success': <Proxy at 0xffff6b636000 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0xffff6b62f420>>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144399Z","level":"info","event":" 'prev_data_interval_start_success': <Proxy at 0xffff6b635f70 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0xffff6b62f2e0>>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144459Z","level":"info","event":" 'prev_end_date_success': <Proxy at 0xffff6b635670 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0xffff6b62f240>>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144516Z","level":"info","event":" 'prev_start_date_success': <Proxy at 0xffff6b6354f0 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0xffff6b61a5c0>>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144572Z","level":"info","event":" 'run_id': 'scheduled__2025-08-06T12:50:00+00:00',","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144629Z","level":"info","event":" 'task': <Task(_PythonDecoratedOperator): simple_task1>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144685Z","level":"info","event":" 'task_instance': RuntimeTaskInstance(id=UUID('01987f6e-6ec7-7e6c-80b6-f46f642abe07'), task_id='simple_task1', dag_id='dags_simple_dag', run_id='scheduled__2025-08-06T12:50:00+00:00', try_number=1, map_index=-1, hostname='042f37798c80', context_carrier={}, task=<Task(_PythonDecoratedOperator): simple_task1>, bundle_instance=LocalDagBundle(name=dags_2), max_tries=0, start_date=datetime.datetime(2025, 8, 6, 12, 50, 0, 629066, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/dags_simple_dag/runs/scheduled__2025-08-06T12%3A50%3A00%2B00%3A00/tasks/simple_task1?try_number=1'),","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144741Z","level":"info","event":" 'task_instance_key_str': 'dags_simple_dag__simple_task1__20250806',","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144796Z","level":"info","event":" 'task_reschedule_count': 0,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144853Z","level":"info","event":" 'templates_dict': None,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144908Z","level":"info","event":" 'ti': RuntimeTaskInstance(id=UUID('01987f6e-6ec7-7e6c-80b6-f46f642abe07'), task_id='simple_task1', dag_id='dags_simple_dag', run_id='scheduled__2025-08-06T12:50:00+00:00', try_number=1, map_index=-1, hostname='042f37798c80', context_carrier={}, task=<Task(_PythonDecoratedOperator): simple_task1>, bundle_instance=LocalDagBundle(name=dags_2), max_tries=0, start_date=datetime.datetime(2025, 8, 6, 12, 50, 0, 629066, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/dags_simple_dag/runs/scheduled__2025-08-06T12%3A50%3A00%2B00%3A00/tasks/simple_task1?try_number=1'),","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144978Z","level":"info","event":" 'triggering_asset_events': TriggeringAssetEventsAccessor(_events=defaultdict(<class 'list'>, {})),","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.145027Z","level":"info","event":" 'ts': '2025-08-06T12:50:00+00:00',","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.145071Z","level":"info","event":" 'ts_nodash': '20250806T125000',","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.145116Z","level":"info","event":" 'ts_nodash_with_tz': '20250806T125000+0000',","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.145170Z","level":"info","event":" 'var': {'json': <VariableAccessor (dynamic access)>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.145215Z","level":"info","event":"         'value': <VariableAccessor (dynamic access)>}}","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.145260Z","level":"info","event":"::endgroup::","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.144635","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-08-06T12:50:01.152681Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.152757Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-06T12:50:01.152836Z","level":"info","event":"Task operator:<Task(_PythonDecoratedOperator): simple_task1>","chan":"stdout","logger":"task"}
